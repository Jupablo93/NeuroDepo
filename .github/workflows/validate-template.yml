name: Validate Template Structure

on:
  pull_request:
    branches:
      - main

jobs:
  check-structure:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Validate template structure
        run: |
          echo "Checking template structure..."

          # Loop through all top-level directories except .github
          for dir in */ ; do
            if [[ "$dir" == ".github/" ]]; then
              continue
            fi

            # Skip non-directories (e.g., LICENSE, root README.md, .DS_Store)
            if [ ! -d "$dir" ]; then
              continue
            fi

            echo "üîç Validating template: $dir"

            # Check required files inside template folder
            required_files=("README.md" "index.html")
            for file in "${required_files[@]}"; do
              if [ ! -f "${dir}${file}" ]; then
                echo "‚ùå Missing required file: $file in $dir"
                exit 1
              fi
            done

            # Check for modularization - ensure CSS and JS are in separate files
            css_found=false
            js_found=false

            # Look for any .css files in the template directory
            if ls "${dir}"*.css 1> /dev/null 2>&1; then
              css_found=true
              echo "‚úÖ Found CSS file(s) in $dir"
            fi

            # Look for any .js files in the template directory
            if ls "${dir}"*.js 1> /dev/null 2>&1; then
              js_found=true
              echo "‚úÖ Found JavaScript file(s) in $dir"
            fi

            # Validate modularization requirements
            if [ "$css_found" = false ]; then
              echo "‚ùå No CSS file found in $dir - templates must be modularized with separate CSS files"
              exit 1
            fi

            if [ "$js_found" = false ]; then
              echo "‚ùå No JavaScript file found in $dir - templates must be modularized with separate JS files"
              exit 1
            fi

            # Check that index.html properly links to external CSS and JS files
            if ! grep -q 'rel="stylesheet"' "${dir}index.html"; then
              echo "‚ùå index.html in $dir does not link to external CSS file(s)"
              exit 1
            fi

            if ! grep -q '<script.*src=' "${dir}index.html"; then
              echo "‚ùå index.html in $dir does not link to external JavaScript file(s)"
              exit 1
            fi

            # Check for inline styles and scripts (discourage non-modular approach)
            if grep -q '<style>' "${dir}index.html"; then
              echo "‚ö†Ô∏è  Warning: Found inline <style> tags in ${dir}index.html - consider moving all styles to external CSS files"
            fi

            if grep -q '<script>' "${dir}index.html" && ! grep -q '<script.*src=' "${dir}index.html"; then
              echo "‚ö†Ô∏è  Warning: Found inline <script> tags in ${dir}index.html - consider moving all JavaScript to external JS files"
            fi

            # Check that assets/images folder exists inside the template folder
            if [ ! -d "${dir}assets/images" ]; then
              echo "‚ùå Missing assets/images folder in ${dir}"
              exit 1
            fi

            # Check folder name format (lowercase + hyphen)
            folder_name=$(basename "$dir")
            if [[ ! "$folder_name" =~ ^[a-z0-9-]+$ ]]; then
              echo "‚ùå Folder name '$folder_name' is invalid (use lowercase letters, numbers, and hyphens only)"
              exit 1
            fi

            echo "‚úÖ Template $dir passed all validation checks!"
          done

          echo ""
          echo "üéâ All templates passed structure validation!"
          echo ""
          echo "Validation summary:"
          echo "- ‚úÖ Required files (README.md, index.html) present"
          echo "- ‚úÖ Proper modularization (separate .css and .js files)"
          echo "- ‚úÖ External file linking in index.html"
          echo "- ‚úÖ Assets/images folder structure"
          echo "- ‚úÖ Naming conventions followed"